---
import { Icon } from 'astro-icon/components'
---

<button
  id="theme-btn"
  class="focus-outline"
  title="Toggles light & dark"
  aria-label="auto"
  aria-live="polite">
  <Icon name="heroicons:moon" id="moon-svg" class="inline-block size-7" />
  <Icon name="heroicons:sun" id="sun-svg" class="inline-block size-7" />
</button>

<script is:inline>
  const primaryColorScheme = '' // "light" | "dark"

  // Get theme data from local storage
  const currentTheme = localStorage.getItem('theme')

  function getPreferTheme() {
    // return theme value in local storage if it is set
    if (currentTheme) return currentTheme

    // return primary color scheme if it is set
    if (primaryColorScheme) return primaryColorScheme

    // return user device's prefer color scheme
    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'
  }

  let themeValue = getPreferTheme()

  function setPreference() {
    const doc = document.documentElement
    const onTransitionDone = () => {
      doc.classList.remove('nightwind')
      doc.removeEventListener('transitionend', onTransitionDone)
    }
    doc.addEventListener('transitionend', onTransitionDone)
    if (!doc.classList.contains('nightwind')) {
      doc.classList.add('nightwind')
    }

    localStorage.setItem('theme', themeValue)
    localStorage.setItem('nightwind-mode', themeValue)
    reflectPreference()
  }

  function reflectPreference() {
    document.firstElementChild.setAttribute('data-theme', themeValue)
    document.documentElement.classList.remove('light')
    document.documentElement.classList.remove('dark')
    document.documentElement.classList.add(themeValue)

    document.querySelector('#theme-btn')?.setAttribute('aria-label', themeValue)

    // Get a reference to the body element
    const body = document.body

    // Check if the body element exists before using getComputedStyle
    if (body) {
      // Get the computed styles for the body element
      const computedStyles = window.getComputedStyle(body)

      // Get the background color property
      const bgColor = computedStyles.backgroundColor

      // Set the background color in <meta theme-color ... />
      document.querySelector("meta[name='theme-color']")?.setAttribute('content', bgColor)
    }
  }

  // set early so no page flashes / CSS is made aware
  reflectPreference()

  window.onload = () => {
    function setThemeFeature() {
      // set on load so screen readers can get the latest value on the button
      reflectPreference()

      // now this script can find and listen for clicks on the control
      document.querySelector('#theme-btn')?.addEventListener('click', () => {
        themeValue = themeValue === 'light' ? 'dark' : 'light'
        setPreference()
      })
    }

    setThemeFeature()

    // Runs on view transitions navigation
    document.addEventListener('astro:after-swap', setThemeFeature)
  }

  // sync with system changes
  window
    .matchMedia('(prefers-color-scheme: dark)')
    .addEventListener('change', ({ matches: isDark }) => {
      themeValue = isDark ? 'dark' : 'light'
      setPreference()
    })
</script>

<style>
  #sun-svg,
  html[data-theme='dark'] #moon-svg {
    display: block;
  }
  #moon-svg,
  html[data-theme='dark'] #sun-svg {
    display: none;
  }
  #theme-btn svg {
    @apply transition-all duration-75 hover:rotate-12;
  }
</style>
