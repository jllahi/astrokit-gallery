---
import fs from 'node:fs/promises'
import { getPlaiceholder } from 'plaiceholder'
import type { HTMLAttributes } from 'astro/types'
import type { CollectionEntry, ContentCollectionKey } from 'astro:content'
import { Image, getImage } from 'astro:assets'
// import { formatDate } from '@/utils/content'
import 'photoswipe/style.css'

interface Props extends HTMLAttributes<'a'> {
	image: CollectionEntry<ContentCollectionKey>
}

const { image, type = 'base64', ...props } = Astro.props

const imagePath = await getImage({
	src: image.data.image,
	format: 'webp',
	width: '3800',
})
// console.log(imagePath)

const getImageHolder = async (image) => {
	console.log('IMAGE: ', image)
	// const buffer = await fetch(src).then(async (res) => Buffer.from(await res.arrayBuffer()))
	const buffer = await fs.readFile(image.fsPath)
	// const buffer = await fs.readFile(path.join('./public', src))

	const {
		metadata: { height, width, format },
		...plaiceholder
	} = await getPlaiceholder(buffer, { size: 10 })

	return {
		...plaiceholder,
		img: { height, width, format },
	}
}

const { base64, color, img } = await getImageHolder(image.data.image)
console.log('BASE64: ', base64)
---

<a
	href={`/image/${image.slug}`}
	class:list={[
		'flex flex-row gap-4',
		// 'rounded py-1 px-2',
		// 'hover:bg-font-color hover:text-background-color',
	]}
	{...props}
	target="_blank"
	title={image.data.title}
	aria-label={image.data.title}
	data-pswp-src={imagePath.src}
	data-pswp-width={imagePath.attributes.width}
	data-pswp-height={imagePath.attributes.height}
	data-cropped="true"
>
	<h2 class="hidden">{image.data.title}</h2>
	<div
		id="imageContainer"
		class:list={[
			'relative block aspect-square overflow-hidden outline outline-1 outline-cyan-100',
		]}
	>
		{
			image.data.image && (
				<>
					{type == 'base64' && (
						<img
							aria-hidden="true"
							alt=""
							src={base64}
							class:list={[
								'absolute inset-0',
								'h-full w-full',
								'scale-150 transform',
								'blur-2xl filter',
								'z-[-1]',
							]}
						/>
					)}
					<div class="overflow-hidden">
						<Image
							src={image.data.image}
							alt={image.data.title}
							width={600}
							height={600}
							class:list={[
								'w-full object-cover duration-1000 ease-in-out',
								'hover:scale-105 hover:transition-all hover:duration-1000',
								'aspect-square',
							]}
							transition:name={`image-${image.data.title}`}
							decoding={'auto'}
							fetchpriority={'auto'}
						/>
					</div>
				</>
			)
		}
	</div>
	<div class="pswp-caption-content">
		<strong class="text-balance text-base font-light">
			{image.data.title}
		</strong>
		<!-- <div class="text-sm text-font-color-20 text-pretty">
			{image.data.description}
		</div> -->
		<!-- <div class="text-sm">{formatDate(image.data.date)}</div> -->
	</div>
</a>

<!-- <script>
	import PhotoSwipe from 'photoswipe'
	import PhotoSwipeLightbox from 'photoswipe/lightbox'
	import PhotoSwipeDynamicCaption from 'photoswipe-dynamic-caption-plugin'
	// import 'photoswipe/style.css'
	// import 'photoswipe-dynamic-caption-plugin/photoswipe-dynamic-caption-plugin.css'

	const smallScreenPadding = {
		top: 0,
		bottom: 0,
		left: 0,
		right: 0,
	}
	const largeScreenPadding = {
		top: 30,
		bottom: 30,
		left: 70,
		right: 70,
	}

	const lightbox = new PhotoSwipeLightbox({
		gallery: '#astrokit-gallery',
		children: 'a',
		bgOpacity: 0.9,
		// pswpModule: () => import('photoswipe'),
		pswpModule: PhotoSwipe,
		paddingFn: (viewportSize) => {
			return viewportSize.x < 700 ? smallScreenPadding : largeScreenPadding
		},
		// paddingFn: (viewportSize) => {
		// 	return {
		// 		top: 30,
		// 		bottom: 30,
		// 		left: 70,
		// 		right: 70,
		// 	}
		// },
	})

	// lightbox.on('uiRegister', function () {
	// 	lightbox.pswp.ui.registerElement({
	// 		name: 'copy-link',
	// 		ariaLabel: 'Copy link',
	// 		order: 9,
	// 		isButton: true,
	// 		html: `<div class="grid place-items-center"><svg xmlns="http://www.w3.org/2000/svg" width="1em" height="1em" viewBox="0 0 24 24" {...props}><g fill="none" stroke="white" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"><rect width="8" height="4" x="8" y="2" rx="1" ry="1"/><path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"/></g></svg></div>`,
	// 		onClick: (event, el) => {
	// 			if (confirm('Do you want to toggle zoom?')) {
	// 				navigator.clipboard.writeText('Hello')
	// 			}
	// 		},
	// 	})
	// })

	const captionPlugin = new PhotoSwipeDynamicCaption(lightbox, {
		mobileLayoutBreakpoint: 700,
		type: 'below',
		mobileCaptionOverlapRatio: 1,
	})
	import.meta.env.DEV && console.log(captionPlugin)

	lightbox.init()
</script> -->
